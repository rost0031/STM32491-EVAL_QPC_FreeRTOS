<?xml version="1.0" encoding="UTF-8"?>
<model version="3.1.3">
 <documentation>/**
 * CommStackMgr Active Object which.  This AO handles all communications work.
 */</documentation>
 <framework name="qpc"/>
 <package name="Events" stereotype="0x01">
  <class name="MenuEvt" superclass="qpc::QEvt">
   <documentation>/**
 * \struct Event struct type for getting data to this AO.
 */</documentation>
   <attribute name="msgSrc" type="MsgSrc" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Where the msg came from so it can be routed back to the sender. */</documentation>
   </attribute>
   <attribute name="buffer[MENU_MAX_CMD_LEN]" type="char" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Buffer to hold the actual menu command */</documentation>
   </attribute>
   <attribute name="bufferLen" type="uint8_t" visibility="0x02" properties="0x00">
    <documentation>/**&lt; Length of the command in the buffer */</documentation>
   </attribute>
  </class>
 </package>
 <package name="AOs" stereotype="0x02">
  <class name="MenuMgr" superclass="qpc::QActive">
   <documentation>/**
 * \brief MenuMgr &quot;class&quot;
 */</documentation>
   <attribute name="menu" type="treeNode_t *" visibility="0x00" properties="0x00">
    <documentation>/**
 * @brief	Pointer to the top level of the menu.  Gets initialized on startup.
 */</documentation>
   </attribute>
   <statechart>
    <initial target="../1">
     <action>(void)e;        /* suppress the compiler warning about unused parameter */

QS_OBJ_DICTIONARY(&amp;l_MenuMgr);
QS_FUN_DICTIONARY(&amp;QHsm_top);
QS_FUN_DICTIONARY(&amp;MenuMgr_initial);
QS_FUN_DICTIONARY(&amp;MenuMgr_Active);

QActive_subscribe((QActive *)me, MENU_GENERAL_REQ_SIG);
</action>
     <initial_glyph conn="1,2,4,3,7,2">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="Active">
     <documentation>/**
 * This state is a catch-all Active state.  If any signals need
 * to be handled that do not cause state transitions and are
 * common to the entire AO, they should be handled here.
 *
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
     <entry>/* Initialize the menu */
me-&gt;menu = MENU_init();
MENU_printf(&quot;*************************************************************\n&quot;);
MENU_printf(&quot;***** Press '?' at any time to request a menu and help. *****\n&quot;);
MENU_printf(&quot;*************************************************************\n&quot;);
MENU_printMenuTree(me-&gt;menu, 0, 0);</entry>
     <tran trig="MENU_GENERAL_REQ">
      <tran_glyph conn="3,82,3,-1,19">
       <action box="0,-2,18,2"/>
      </tran_glyph>
     </tran>
     <state name="WaitForMenuRequest">
      <documentation>/**
 * This state is the initial state and waits for a user to request a menu.
 *
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
      <entry>MENU_printf(&quot; ***** Press '?' at any time to request a menu ***** \n&quot;);</entry>
      <state_glyph node="74,35,18,10">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="3,3,94,82">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="108,90"/>
   </statechart>
  </class>
  <attribute name="AO_MenuMgr" type="QActive * const" visibility="0x00" properties="0x00">
   <documentation>/**&lt; &quot;opaque&quot; pointer to the Active Object */</documentation>
  </attribute>
  <operation name="MenuMgr_ctor" type="void" visibility="0x00" properties="0x00">
   <documentation>/**
 * @brief C &quot;constructor&quot; for MenuMgr &quot;class&quot;.
 * Initializes all the timers and queues used by the AO and sets of the
 * first state.
 * @param  None
 * @param  None
 * @retval None
 */</documentation>
   <code>MenuMgr *me = &amp;l_MenuMgr;
QActive_ctor(&amp;me-&gt;super, (QStateHandler)&amp;MenuMgr_initial);</code>
  </operation>
 </package>
 <directory name=".">
  <file name="MenuMgr_gen.c">
   <text>/**
 * @file    MenuMgr.c
 * Declarations for functions for the MenuMgr AO.  This state machine handles 
 * all menu interactions.
 *
 * Note: If editing this file, please make sure to update the MenuMgr.qm
 * model.  The generated code from that model should be very similar to the
 * code in this file.
 *
 * @date    09/26/2014
 * @author  Harry Rostovtsev
 * @email   harry_rostovtsev@datacard.com
 * Copyright (C) 2014 Datacard. All rights reserved.
 *
 * @addtogroup groupMenu
 * @{
 */

/* Includes ------------------------------------------------------------------*/
#include &quot;MenuMgr.h&quot;
#include &quot;project_includes.h&quot;           /* Includes common to entire project. */
#include &quot;menu.h&quot;

/* Compile-time called macros ------------------------------------------------*/
Q_DEFINE_THIS_FILE;                 /* For QSPY to know the name of this file */
DBG_DEFINE_THIS_MODULE( DBG_MODL_MENU );/* For debug system to ID this module */

/* Private typedefs ----------------------------------------------------------*/
$declare(AOs::MenuMgr)

/* Private defines -----------------------------------------------------------*/
/* Private macros ------------------------------------------------------------*/
/* Private variables and Local objects ---------------------------------------*/

static MenuMgr l_MenuMgr; /* the single instance of the Interstage active object */

/* Global-scope objects ----------------------------------------------------*/
QActive * const AO_MenuMgr = (QActive *)&amp;l_MenuMgr;  /* &quot;opaque&quot; AO pointer */

/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
$define(AOs::MenuMgr_ctor)
$define(AOs::MenuMgr)

/**
 * @} end addtogroup groupMenu
 */
/******** Copyright (C) 2014 Datacard. All rights reserved *****END OF FILE****/</text>
  </file>
  <file name="MenuMgr_gen.h">
   <text>/**
 * @file    MenuMgr.c
 * Declarations for functions for the MenuMgr AO.  This state machine handles 
 * all menu interactions.
 *
 * Note: If editing this file, please make sure to update the MenuMgr.qm
 * model.  The generated code from that model should be very similar to the
 * code in this file.
 *
 * @date    09/26/2014
 * @author  Harry Rostovtsev
 * @email   harry_rostovtsev@datacard.com
 * Copyright (C) 2014 Datacard. All rights reserved.
 *
 * @addtogroup groupMenu
 * @{
 */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef MENUMGR_H_
#define MENUMGR_H_

/* Includes ------------------------------------------------------------------*/
#include &quot;qp_port.h&quot;                                        /* for QP support */
#include &quot;Shared.h&quot;

/* Exported defines ----------------------------------------------------------*/
/**
 *@brief    Max length of a menu command
 */
#define MENU_MAX_CMD_LEN                                                       8

/* Exported macros -----------------------------------------------------------*/
/* Exported types ------------------------------------------------------------*/
$declare(Events)

/* Exported constants --------------------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
$declare(AOs::MenuMgr_ctor)
$declare(AOs::AO_MenuMgr)

/* Don't declare the MsgEvt type here since it needs to be visible to LWIP, 
 * which is a shared port common to any ethernet project.  Instead, it's 
 * declared in Shared.h, which is included by LWIPMgr.h */
/* $declare(Events) */

/**
 * @} end addtogroup groupMenu
 */
#endif                                                          /* MENUMGR_H_ */
/******** Copyright (C) 2014 Datacard. All rights reserved *****END OF FILE****/</text>
  </file>
 </directory>
</model>
