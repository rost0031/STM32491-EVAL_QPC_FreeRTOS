<?xml version="1.0" encoding="UTF-8"?>
<model version="2.2.03">
 <framework name="qpc"/>
 <package name="Events" stereotype="0x01">
  <class name="MsgEvt" superclass="qpc::QEvt">
   <documentation>MsgEvt types will use CommStackSignals for
signal names.  These events are responsible
for getting data from Eth/Serial to CommStackMgr</documentation>
   <attribute name="msg_src" type="MsgSrc" visibility="0x01" properties="0x00">
    <documentation>Where the msg came from so it can be routed
back to the sender.</documentation>
   </attribute>
   <attribute name="msg_len" type="uint16_t" visibility="0x01" properties="0x00">
    <documentation>Length of the msg buffer</documentation>
   </attribute>
   <attribute name="msg[MAX_MSG_LEN]" type="char" visibility="0x01" properties="0x00">
    <documentation>Buffer that holds the data of the msg.</documentation>
   </attribute>
  </class>
 </package>
 <package name="AOs" stereotype="0x02">
  <class name="CommStackMgr" superclass="qpc::QActive">
   <documentation>MtrDiag Active Object</documentation>
   <attribute name="timeTestTimerEvt" type="QTimeEvt" visibility="0x01" properties="0x00">
    <documentation>Used to timeout for testing the clock.</documentation>
   </attribute>
   <statechart>
    <initial target="../1">
     <action>(void)e;        /* suppress the compiler warning about unused parameter */

QS_OBJ_DICTIONARY(&amp;l_CommStackMgr);
QS_FUN_DICTIONARY(&amp;QHsm_top);
QS_FUN_DICTIONARY(&amp;CommStackMgr_initial);
QS_FUN_DICTIONARY(&amp;CommStackMgr_Running);

QActive_subscribe((QActive *)me, MSG_SEND_OUT_SIG);
QActive_subscribe((QActive *)me, MSG_RECEIVED_SIG);
QActive_subscribe((QActive *)me, TIME_TEST_SIG);</action>
     <initial_glyph conn="1,2,4,3,4,2">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="Active">
     <documentation>This state is a catch-all Active state.  If any signals need
to be handled that do not cause state transitions and are 
common to the entire AO, they should be handled here.
 
@param  me: Pointer to the state machine
@param  e:  Pointer to the event being processed.
@retval status: QState type that specifies where the state
machine is going next.
</documentation>
     <entry>/* Every 2 seconds, post an event to print time */
QTimeEvt_postEvery(
    &amp;me-&gt;timeTestTimerEvt,
    (QActive *)me,
    SEC_TO_TICKS( 5 )
);</entry>
     <tran trig="MSG_SEND_OUT">
      <tran_glyph conn="3,9,3,-1,21">
       <action box="0,-2,16,2"/>
      </tran_glyph>
     </tran>
     <tran trig="MSG_RECEIVED">
      <tran_glyph conn="3,14,3,-1,21">
       <action box="0,-2,17,2"/>
      </tran_glyph>
     </tran>
     <tran trig="TIME_TEST">
      <action>DBG_printf(&quot;Test msg from CommStackMgr\n&quot;);</action>
      <tran_glyph conn="3,19,3,-1,21">
       <action box="0,-2,11,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="3,3,94,82">
      <entry box="1,2,5,2"/>
     </state_glyph>
    </state>
    <state_diagram size="108,90"/>
   </statechart>
  </class>
  <attribute name="AO_CommStackMgr" type="QActive * const" visibility="0x00" properties="0x00"/>
  <operation name="CommStackMgr_ctor" type="void" visibility="0x00" properties="0x00">
   <documentation>This function is a C &quot;constructor&quot; for this active object.</documentation>
   <code>CommStackMgr *me = &amp;l_CommStackMgr;
QActive_ctor(&amp;me-&gt;super, (QStateHandler)&amp;CommStackMgr_initial);
QTimeEvt_ctor(&amp;me-&gt;timeTestTimerEvt, TIME_TEST_SIG);</code>
  </operation>
 </package>
 <directory name=".">
  <file name="CommStackMgr_gen.c">
   <text>/**
 * @file    CommStackMgr.c
 * Declarations for functions for the CommStackMgr AO.  This state
 * machine handles all incoming messages and their distribution for the
 * bootloader.
 *
 * Note: If editing this file, please make sure to update the CommStackMgr.qm
 * model.  The generated code from that model should be very similar to the
 * code in this file.
 *
 * @date    05/27/2014
 * @author  Harry Rostovtsev
 * @email   harry_rostovtsev@datacard.com
 * Copyright (C) 2014 Datacard. All rights reserved.
 */
#include &quot;CommStackMgr.h&quot;
#include &quot;project_includes.h&quot;         /* Includes common to entire project. */
#include &quot;bsp.h&quot;                            /* For time to ticks conversion */

Q_DEFINE_THIS_FILE;

/* application signals cannot overlap the device-driver signals */
Q_ASSERT_COMPILE(MAX_SHARED_SIG &lt; DEV_DRIVER_SIG);

#define LWIP_ALLOWED
#define USER_FLASH_FIRST_PAGE_ADDRESS                              0x08020000
#define BOOT_APP_TIMEOUT                                           30000

typedef void (*pFunction)(void);
pFunction Jump_To_Application;
uint32_t JumpAddress;

/* Active object class -----------------------------------------------------*/
$declare(AOs::CommStackMgr)

/* Local objects -----------------------------------------------------------*/
static CommStackMgr l_CommStackMgr; /* the single instance of the Interstage active object */

/* Global-scope objects ----------------------------------------------------*/
QActive * const AO_CommStackMgr = (QActive *)&amp;l_CommStackMgr;  /* &quot;opaque&quot; AO pointer */

$define(AOs::CommStackMgr_ctor)
$define(AOs::CommStackMgr)

/******** Copyright (C) 2014 Datacard. All rights reserved *****END OF FILE****/</text>
  </file>
  <file name="CommStackMgr_gen.h">
   <text>/**
 * @file    CommStackMgr.h
 * Declarations for functions for the CommStackMgr AO.  This state
 * machine handles all incoming messages and their distribution for the
 * bootloader.
 *
 * Note: If editing this file, please make sure to update the CommStackMgr.qm
 * model.  The generated code from that model should be very similar to the
 * code in this file.
 *
 * @date    05/27/2014
 * @author  Harry Rostovtsev
 * @email   harry_rostovtsev@datacard.com
 * Copyright (C) 2014 Datacard. All rights reserved.
 */
#ifndef COMMSTACKMGR_H_
#define COMMSTACKMGR_H_

#include &quot;qp_port.h&quot;                                        /* for QP support */

$declare(AOs::CommStackMgr_ctor)
$declare(AOs::AO_CommStackMgr)

/* Don't declare the MsgEvt type here since it needs to be visible to LWIP, 
 * which is a shared port common to any ethernet project.  Instead, it's 
 * declared in Shared.h, which is included by LWIPMgr.h */
/* $declare(Events) */

#endif                                                     /* COMMSTACKMGR_H_ */
/******** Copyright (C) 2014 Datacard. All rights reserved *****END OF FILE****/</text>
  </file>
 </directory>
</model>
