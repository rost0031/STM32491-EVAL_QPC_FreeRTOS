<?xml version="1.0" encoding="UTF-8"?>
<model version="3.1.3">
 <documentation>/**
 * CommStackMgr Active Object which.  This AO handles all communications work.
 */</documentation>
 <framework name="qpc"/>
 <package name="Events" stereotype="0x01">
  <class name="MsgEvt" superclass="qpc::QEvt">
   <documentation>/**
 * \struct Event struct type for getting data from Eth driver to LWIPMgr.
 * MsgEvt types will use CommStackSignals for signal names.  These events are
 * responsible for getting data from Eth/Serial to CommStackMgr.
 */</documentation>
   <attribute name="msg_src" type="MsgSrc" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Where the msg came from so it can be routed back to the sender. */</documentation>
   </attribute>
   <attribute name="msg_len" type="uint16_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Length of the msg buffer. */</documentation>
   </attribute>
   <attribute name="msg[MAX_MSG_LEN]" type="char" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Buffer that holds the data of the msg. */</documentation>
   </attribute>
  </class>
 </package>
 <package name="AOs" stereotype="0x02">
  <class name="CommStackMgr" superclass="qpc::QActive">
   <documentation>/**
 * \brief CommStackMgr &quot;class&quot;
 */</documentation>
   <attribute name="timeTestTimerEvt" type="QTimeEvt" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Local timer for testing the clock. */</documentation>
   </attribute>
   <statechart>
    <initial target="../1">
     <action>(void)e;        /* suppress the compiler warning about unused parameter */

QS_OBJ_DICTIONARY(&amp;l_CommStackMgr);
QS_FUN_DICTIONARY(&amp;QHsm_top);
QS_FUN_DICTIONARY(&amp;CommStackMgr_initial);
QS_FUN_DICTIONARY(&amp;CommStackMgr_Active);

QActive_subscribe((QActive *)me, MSG_SEND_OUT_SIG);
QActive_subscribe((QActive *)me, MSG_RECEIVED_SIG);
QActive_subscribe((QActive *)me, TIME_TEST_SIG);</action>
     <initial_glyph conn="1,2,4,3,4,2">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="Active">
     <documentation>/**
 * This state is a catch-all Active state.  If any signals need
 * to be handled that do not cause state transitions and are
 * common to the entire AO, they should be handled here.
 *
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
     <entry>/* Every 2 seconds, post an event to print time */
QTimeEvt_postEvery(
    &amp;me-&gt;timeTestTimerEvt,
    (QActive *)me,
    SEC_TO_TICKS( 5 )
);</entry>
     <tran trig="MSG_SEND_OUT">
      <tran_glyph conn="3,9,3,-1,21">
       <action box="0,-2,16,2"/>
      </tran_glyph>
     </tran>
     <tran trig="MSG_RECEIVED">
      <tran_glyph conn="3,14,3,-1,21">
       <action box="0,-2,17,2"/>
      </tran_glyph>
     </tran>
     <tran trig="TIME_TEST">
      <action>DBG_printf(&quot;I2C write/read test\n&quot;);


/* Create event to request i2c data and publish it. */

I2CEvt *i2cEvt = Q_NEW(I2CEvt, I2C_READ_START_SIG);
i2cEvt-&gt;i2cDevice = EEPROM;
i2cEvt-&gt;wAddr = 0x00;
i2cEvt-&gt;wDataLen  = 17;
QF_PUBLISH((QEvent *)i2cEvt, AO_CommStackMgr);


/* Write some data to the i2c EEPROM */

I2CDataEvt *i2cDataEvt = Q_NEW(I2CDataEvt, I2C_WRITE_START_SIG);
i2cDataEvt-&gt;i2cDevice = EEPROM;
i2cDataEvt-&gt;wAddr = 0x00;
i2cDataEvt-&gt;wDataLen  = 17;
i2cDataEvt-&gt;bufData[0] = 0x00;
i2cDataEvt-&gt;bufData[1] = 0x01;
i2cDataEvt-&gt;bufData[2] = 0x02;
i2cDataEvt-&gt;bufData[3] = 0x03;
i2cDataEvt-&gt;bufData[4] = 0x04;
i2cDataEvt-&gt;bufData[5] = 0x05;
i2cDataEvt-&gt;bufData[6] = 0x06;
i2cDataEvt-&gt;bufData[7] = 0x07;
i2cDataEvt-&gt;bufData[8] = 0x08;
i2cDataEvt-&gt;bufData[9] = 0x09;
i2cDataEvt-&gt;bufData[10] =0x0A;
i2cDataEvt-&gt;bufData[11] =0x0B;
i2cDataEvt-&gt;bufData[12] =0x0C;
i2cDataEvt-&gt;bufData[13] =0x0D;
i2cDataEvt-&gt;bufData[14] =0x0E;
i2cDataEvt-&gt;bufData[15] =0x0F;
i2cDataEvt-&gt;bufData[16] =0x10;
QF_PUBLISH((QEvent *)i2cDataEvt, AO_CommStackMgr);

I2CEvt *i2cEvt1 = Q_NEW(I2CEvt, I2C_READ_START_SIG);
i2cEvt1-&gt;i2cDevice = EEPROM;
i2cEvt1-&gt;wAddr = 0x00;
i2cEvt1-&gt;wDataLen  = 17;
QF_PUBLISH((QEvent *)i2cEvt1, AO_CommStackMgr);



QTimeEvt_disarm( &amp;me-&gt;timeTestTimerEvt );

/*
time_T fast_print_start_time = TIME_getTime();
DBG_printf(&quot;Fast DBG_printf() test message from CommStackMgr\n&quot;);
time_T fast_print_finish_time = TIME_getTime();

time_T slow_print_start_time = TIME_getTime();
dbg_slow_printf(&quot;Slow dbg_slow_printf() test message from CommStackMgr\n&quot;);
time_T slow_print_finish_time = TIME_getTime();

DBG_printf(&quot;DBG_printf() start: %02d:%02d:%02d:%d stop: %02d:%02d:%02d:%d\n&quot;,
     fast_print_start_time.hour_min_sec.RTC_Hours,
     fast_print_start_time.hour_min_sec.RTC_Minutes,
     fast_print_start_time.hour_min_sec.RTC_Seconds,
     (int)fast_print_start_time.sub_sec,
     fast_print_finish_time.hour_min_sec.RTC_Hours,
     fast_print_finish_time.hour_min_sec.RTC_Minutes,
     fast_print_finish_time.hour_min_sec.RTC_Seconds,
     (int)fast_print_finish_time.sub_sec
);
DBG_printf(&quot;dbg_slow_printf() start: %02d:%02d:%02d:%d stop: %02d:%02d:%02d:%d\n&quot;,
     slow_print_start_time.hour_min_sec.RTC_Hours,
     slow_print_start_time.hour_min_sec.RTC_Minutes,
     slow_print_start_time.hour_min_sec.RTC_Seconds,
     (int)slow_print_start_time.sub_sec,
     slow_print_finish_time.hour_min_sec.RTC_Hours,
     slow_print_finish_time.hour_min_sec.RTC_Minutes,
     slow_print_finish_time.hour_min_sec.RTC_Seconds,
     (int)slow_print_finish_time.sub_sec
);
*/</action>
      <tran_glyph conn="3,19,3,-1,21">
       <action box="0,-2,11,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="3,3,94,82">
      <entry box="1,2,5,2"/>
     </state_glyph>
    </state>
    <state_diagram size="108,90"/>
   </statechart>
  </class>
  <attribute name="AO_CommStackMgr" type="QActive * const" visibility="0x00" properties="0x00">
   <documentation>/**&lt; &quot;opaque&quot; pointer to the Active Object */</documentation>
  </attribute>
  <operation name="CommStackMgr_ctor" type="void" visibility="0x00" properties="0x00">
   <documentation>/**
 * @brief C &quot;constructor&quot; for CommStackMgr &quot;class&quot;.
 * Initializes all the timers and queues used by the AO and sets of the
 * first state.
 * @param  None
 * @param  None
 * @retval None
 */</documentation>
   <code>CommStackMgr *me = &amp;l_CommStackMgr;
QActive_ctor(&amp;me-&gt;super, (QStateHandler)&amp;CommStackMgr_initial);
QTimeEvt_ctor(&amp;me-&gt;timeTestTimerEvt, TIME_TEST_SIG);</code>
  </operation>
 </package>
 <directory name=".">
  <file name="CommStackMgr_gen.c">
   <text>/**
 * @file    CommStackMgr.c
 * Declarations for functions for the CommStackMgr AO.  This state
 * machine handles all incoming messages and their distribution for the
 * bootloader.
 *
 * Note: If editing this file, please make sure to update the CommStackMgr.qm
 * model.  The generated code from that model should be very similar to the
 * code in this file.
 *
 * @date    05/27/2014
 * @author  Harry Rostovtsev
 * @email   harry_rostovtsev@datacard.com
 * Copyright (C) 2014 Datacard. All rights reserved.
 */

/* Includes ------------------------------------------------------------------*/
#include &quot;CommStackMgr.h&quot;
#include &quot;project_includes.h&quot;           /* Includes common to entire project. */
#include &quot;bsp.h&quot;                              /* For time to ticks conversion */
#include &quot;I2CMgr.h&quot;                                         /* For I2CDataEvt */
#include &quot;time.h&quot;
#include &quot;stm32f4x7_eth.h&quot;
/* Compile-time called macros ------------------------------------------------*/
Q_DEFINE_THIS_FILE;                 /* For QSPY to know the name of this file */
DBG_DEFINE_THIS_MODULE( DBG_MODL_GENERAL ); /* For debug system to ID this module */

/* Private typedefs ----------------------------------------------------------*/
typedef void (*pFunction)(void);

$declare(AOs::CommStackMgr)

/* Private defines -----------------------------------------------------------*/
#define LWIP_ALLOWED
#define USER_FLASH_FIRST_PAGE_ADDRESS                              0x08020000
#define BOOT_APP_TIMEOUT                                           30000

/* Private macros ------------------------------------------------------------*/
/* Private variables and Local objects ---------------------------------------*/
pFunction Jump_To_Application;
uint32_t JumpAddress;

static CommStackMgr l_CommStackMgr; /* the single instance of the Interstage active object */

/* Global-scope objects ----------------------------------------------------*/
QActive * const AO_CommStackMgr = (QActive *)&amp;l_CommStackMgr;  /* &quot;opaque&quot; AO pointer */

/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
$define(AOs::CommStackMgr_ctor)
$define(AOs::CommStackMgr)

/******** Copyright (C) 2014 Datacard. All rights reserved *****END OF FILE****/</text>
  </file>
  <file name="CommStackMgr_gen.h">
   <text>/**
 * @file    CommStackMgr.h
 * Declarations for functions for the CommStackMgr AO.  This state
 * machine handles all incoming messages and their distribution for the
 * bootloader.
 *
 * Note: If editing this file, please make sure to update the CommStackMgr.qm
 * model.  The generated code from that model should be very similar to the
 * code in this file.
 *
 * @date    05/27/2014
 * @author  Harry Rostovtsev
 * @email   harry_rostovtsev@datacard.com
 * Copyright (C) 2014 Datacard. All rights reserved.
 */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef COMMSTACKMGR_H_
#define COMMSTACKMGR_H_

/* Includes ------------------------------------------------------------------*/
#include &quot;qp_port.h&quot;                                        /* for QP support */

/* Exported defines ----------------------------------------------------------*/
/* Exported macros -----------------------------------------------------------*/
/* Exported types ------------------------------------------------------------*/
/* Exported constants --------------------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
$declare(AOs::CommStackMgr_ctor)
$declare(AOs::AO_CommStackMgr)

/* Don't declare the MsgEvt type here since it needs to be visible to LWIP, 
 * which is a shared port common to any ethernet project.  Instead, it's 
 * declared in Shared.h, which is included by LWIPMgr.h */
/* $declare(Events) */

#endif                                                     /* COMMSTACKMGR_H_ */
/******** Copyright (C) 2014 Datacard. All rights reserved *****END OF FILE****/</text>
  </file>
 </directory>
</model>
