<?xml version="1.0" encoding="UTF-8"?>
<model version="3.1.3">
 <documentation>/**
 * CommStackMgr Active Object which.  This AO handles all communications work.
 */</documentation>
 <framework name="qpc"/>
 <package name="Events" stereotype="0x01">
  <class name="MenuEvt" superclass="qpc::QEvt">
   <documentation>/**
 * \struct Event struct type for getting data to this AO.
 */</documentation>
   <attribute name="msgSrc" type="MsgSrc" visibility="0x02" properties="0x00">
    <documentation>/**&lt; Where the msg came from so it can be routed back to the sender. */</documentation>
   </attribute>
   <attribute name="buffer[MENU_MAX_CMD_LEN]" type="char" visibility="0x02" properties="0x00">
    <documentation>/**&lt; Buffer to hold the actual menu command */</documentation>
   </attribute>
   <attribute name="bufferLen" type="uint8_t" visibility="0x02" properties="0x00">
    <documentation>/**&lt; Length of the command in the buffer */</documentation>
   </attribute>
  </class>
 </package>
 <package name="AOs" stereotype="0x02">
  <class name="DbgMgr" superclass="qpc::QActive">
   <documentation>/**
 * \brief MenuMgr &quot;class&quot;
 */</documentation>
   <attribute name="menu" type="treeNode_t *" visibility="0x01" properties="0x00">
    <documentation>/**
 * @brief	Pointer to the top level of the menu.  Gets initialized on startup.
 */</documentation>
   </attribute>
   <attribute name="menuReqSrc" type="MsgSrc" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Keeps track of where each menu request comes from so we know where to send the
     replies.*/</documentation>
   </attribute>
   <statechart>
    <initial target="../1">
     <action>(void)e;        /* suppress the compiler warning about unused parameter */

QS_OBJ_DICTIONARY(&amp;l_DbgMgr);
QS_FUN_DICTIONARY(&amp;QHsm_top);
QS_FUN_DICTIONARY(&amp;DbgMgr_initial);
QS_FUN_DICTIONARY(&amp;DbgMgr_Active);

QActive_subscribe((QActive *)me, DBG_MENU_REQ_SIG);
QActive_subscribe((QActive *)me, DBG_LOG_SIG);</action>
     <initial_glyph conn="1,2,4,3,7,2">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="Active">
     <documentation>/**
 * This state is a catch-all Active state.  If any signals need
 * to be handled that do not cause state transitions and are
 * common to the entire AO, they should be handled here.
 *
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
     <entry>/* Initialize the menu */
me-&gt;menu = MENU_init();
printf(&quot;*************************************************************\n&quot;);
printf(&quot;***** Press '?' at any time to request a menu and help. *****\n&quot;);
printf(&quot;*************************************************************\n&quot;);</entry>
     <tran trig="DBG_MENU_REQ">
      <action>me-&gt;menuReqSrc = ((MenuEvt const *)e)-&gt;msgSrc;
me-&gt;menu = MENU_parse(me-&gt;menu, ((MenuEvt const *)e)-&gt;buffer, ((MenuEvt const *)e)-&gt;bufferLen, ((MenuEvt const *)e)-&gt;msgSrc);</action>
      <tran_glyph conn="3,13,3,-1,19">
       <action box="0,-2,18,2"/>
      </tran_glyph>
     </tran>
     <tran trig="DBG_LOG">
      <action>//DBG_printf(&quot;Got DBG_LOG\n&quot;);  If this is uncommented, you will get a qa_fifo assert</action>
      <tran_glyph conn="3,16,3,-1,19">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="I2C1_DEV_READ_DONE">
      <action>QActive_unsubscribe((QActive *)me, I2C1_DEV_READ_DONE_SIG);
LOG_printf(&quot;Received I2C1_DEV_READ_DONE\n&quot;);
char tmp[120];
uint16_t tmpLen = 0;
CBErrorCode err = CON_hexToStr(
    (const uint8_t *)((I2CReadDoneEvt const *)e)-&gt;dataBuf, // data to convert
    ((I2CReadDoneEvt const *)e)-&gt;bytes,  // length of data to convert
    tmp,                                 // where to write output
    sizeof(tmp),                         // max size of output buffer
    &amp;tmpLen,                             // size of the resulting output
    0,                                   // no columns
    ' ',                                 // separator
    true                                 // bPrintX
);

MENU_printf(
    me-&gt;menuReqSrc,
    &quot;--- Test Done  --- Read %d bytes from device %s on %s: %s with error: 0x%08x\n&quot;,
    ((I2CReadDoneEvt const *)e)-&gt;bytes,
    I2C_devToStr( ((I2CReadDoneEvt const *)e)-&gt;i2cDev ),
    I2C_busToStr(
        I2C_getBus( ((I2CReadDoneEvt const *)e)-&gt;i2cDev )
    ),
    tmp,
    ((I2CReadDoneEvt const *)e)-&gt;status
);


</action>
      <tran_glyph conn="3,44,3,-1,21">
       <action box="0,-2,21,2"/>
      </tran_glyph>
     </tran>
     <tran trig="I2C1_DEV_WRITE_DONE">
      <action>QActive_unsubscribe((QActive *)me, I2C1_DEV_WRITE_DONE_SIG);
LOG_printf(&quot;Received I2C1_DEV_WRITE_DONE\n&quot;);

MENU_printf(
    me-&gt;menuReqSrc,
    &quot;--- Test Done  --- Wrote %d bytes to device %s on %s with error: 0x%08x\n&quot;,
    ((I2CWriteDoneEvt const *)e)-&gt;bytes,
    I2C_devToStr( ((I2CWriteDoneEvt const *)e)-&gt;i2cDev ),
    I2C_busToStr(
        I2C_getBus( ((I2CWriteDoneEvt const *)e)-&gt;i2cDev )
    ),
    ((I2CWriteDoneEvt const *)e)-&gt;status
);</action>
      <tran_glyph conn="3,47,3,-1,21">
       <action box="0,-2,21,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="3,3,101,85">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="108,90"/>
   </statechart>
  </class>
  <attribute name="AO_DbgMgr" type="QActive * const" visibility="0x00" properties="0x00">
   <documentation>/**&lt; &quot;opaque&quot; pointer to the Active Object */</documentation>
  </attribute>
  <operation name="DbgMgr_ctor" type="void" visibility="0x00" properties="0x00">
   <documentation>/**
 * @brief C &quot;constructor&quot; for DbgMgr &quot;class&quot;.
 * Initializes all the timers and queues used by the AO and sets of the
 * first state.
 * @param  None
 * @param  None
 * @retval None
 */</documentation>
   <code>DbgMgr *me = &amp;l_DbgMgr;
QActive_ctor(&amp;me-&gt;super, (QStateHandler)&amp;DbgMgr_initial);</code>
  </operation>
 </package>
 <directory name=".">
  <file name="DbgMgr_gen.c">
   <text>/**
 * @file    DbgMgr.c
 * Declarations for functions for the DbgMgr AO.  This state machine handles
 * all menu interactions and log msg propagation as well as storing log msgs
 * to the circular buffer in RAM.  Basically, it handles all debugging
 * functionality.
 *
 * Note: If editing this file, please make sure to update the DbgMgr.qm
 * model.  The generated code from that model should be very similar to the
 * code in this file.
 *
 * @date    10/15/2014
 * @author  Harry Rostovtsev
 * @email   harry_rostovtsev@datacard.com
 * Copyright (C) 2014 Datacard. All rights reserved.
 *
 * @addtogroup groupDbg
 * @{
 */

/* Includes ------------------------------------------------------------------*/
#include &quot;DbgMgr.h&quot;
#include &quot;project_includes.h&quot;           /* Includes common to entire project. */
#include &quot;menu_top.h&quot;
#include &quot;LWIPMgr.h&quot;
#include &quot;I2C1DevMgr.h&quot;
#include &quot;i2c_dev.h&quot;

/* Compile-time called macros ------------------------------------------------*/
Q_DEFINE_THIS_FILE;                 /* For QSPY to know the name of this file */
DBG_DEFINE_THIS_MODULE( DBG_MODL_DBG );/* For debug system to ID this module */

/* Private typedefs ----------------------------------------------------------*/
$declare(AOs::DbgMgr)

/* Private defines -----------------------------------------------------------*/
/* Private macros ------------------------------------------------------------*/
/* Private variables and Local objects ---------------------------------------*/

static DbgMgr l_DbgMgr;/* the single instance of the Interstage active object */

/* Global-scope objects ----------------------------------------------------*/
QActive * const AO_DbgMgr = (QActive *)&amp;l_DbgMgr;  /* &quot;opaque&quot; AO pointer */

/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
$define(AOs::DbgMgr_ctor)
$define(AOs::DbgMgr)

/**
 * @} end addtogroup groupDbg
 */
/******** Copyright (C) 2014 Datacard. All rights reserved *****END OF FILE****/</text>
  </file>
  <file name="DbgMgr_gen.h">
   <text>/**
 * @file    DbgMgr.h
 * Declarations for functions for the DbgMgr AO.  This state machine handles
 * all menu interactions and log msg propagation as well as storing log msgs
 * to the circular buffer in RAM.  Basically, it handles all debugging
 * functionality.
 *
 * Note: If editing this file, please make sure to update the DbgMgr.qm
 * model.  The generated code from that model should be very similar to the
 * code in this file.
 *
 * @date    10/15/2014
 * @author  Harry Rostovtsev
 * @email   harry_rostovtsev@datacard.com
 * Copyright (C) 2014 Datacard. All rights reserved.
 *
 * @addtogroup groupDbg
 * @{
 */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef DBGMGR_H_
#define DBGMGR_H_

/* Includes ------------------------------------------------------------------*/
#include &quot;qp_port.h&quot;                                        /* for QP support */
#include &quot;Shared.h&quot;

/* Exported defines ----------------------------------------------------------*/
/**
 *@brief    Max length of a menu command
 */
#define MENU_MAX_CMD_LEN                                                       8

/* Exported macros -----------------------------------------------------------*/
/* Exported types ------------------------------------------------------------*/
$declare(Events)

/* Exported constants --------------------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
$declare(AOs::DbgMgr_ctor)
$declare(AOs::AO_DbgMgr)

/**
 * @} end addtogroup groupDbg
 */
#endif                                                           /* DBGMGR_H_ */
/******** Copyright (C) 2014 Datacard. All rights reserved *****END OF FILE****/</text>
  </file>
 </directory>
</model>
