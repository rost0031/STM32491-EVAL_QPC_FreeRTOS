<?xml version="1.0" encoding="UTF-8"?>
<model version="3.1.3">
 <documentation>/**
 * GuiMgr Active Object which.  This AO handles all LCD/TSC/GUI work.
 */</documentation>
 <framework name="qpc"/>
 <package name="Events" stereotype="0x01"/>
 <package name="AOs" stereotype="0x02">
  <class name="GuiMgr" superclass="qpc::QActive">
   <documentation>/**
 * \brief MenuMgr &quot;class&quot;
 */</documentation>
   <statechart>
    <initial target="../1">
     <action>(void)e;        /* suppress the compiler warning about unused parameter */

/* Activate the use of memory device feature */
WM_SetCreateFlags(WM_CF_MEMDEV);

/* Init the STemWin GUI Library */
GUI_Init();

/* Display a test message to verify LCD is working */
GUI_DispStringAt(&quot;Hello World!&quot;, 0, 0);

QS_OBJ_DICTIONARY(&amp;l_GuiMgr);
QS_FUN_DICTIONARY(&amp;QHsm_top);
QS_FUN_DICTIONARY(&amp;GuiMgr_initial);
QS_FUN_DICTIONARY(&amp;GuiMgr_Active);</action>
     <initial_glyph conn="1,2,4,3,7,2">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="Active">
     <documentation>/**
 * This state is a catch-all Active state.  If any signals need
 * to be handled that do not cause state transitions and are
 * common to the entire AO, they should be handled here.
 *
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
     <entry>DBG_printf(&quot;GuiMgr successfully started\n&quot;);</entry>
     <state_glyph node="3,3,101,85">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="108,90"/>
   </statechart>
  </class>
  <attribute name="AO_GuiMgr" type="QActive * const" visibility="0x00" properties="0x00">
   <documentation>/**&lt; &quot;opaque&quot; pointer to the Active Object */</documentation>
  </attribute>
  <operation name="GuiMgr_ctor" type="void" visibility="0x00" properties="0x00">
   <documentation>/**
 * @brief C &quot;constructor&quot; for GuiMgr &quot;class&quot;.
 * Initializes all the timers and queues used by the AO and sets of the
 * first state.
 * @param  None
 * @param  None
 * @retval None
 */</documentation>
   <code>GuiMgr *me = &amp;l_GuiMgr;
QActive_ctor(&amp;me-&gt;super, (QStateHandler)&amp;GuiMgr_initial);</code>
  </operation>
 </package>
 <directory name=".">
  <file name="GuiMgr_gen.c">
   <text>/**
 * @file    GuiMgr.c
 * Definitions for functions for the GuiMgr AO.  This state machine handles
 * all touchscreen, LCD, and GUI events and actions.
 *
 * Note: If editing this file, please make sure to update the GuiMgr.qm
 * model.  The generated code from that model should be very similar to the
 * code in this file.
 *
 * @date    11/06/2014
 * @author  Harry Rostovtsev
 * @email   harry_rostovtsev@datacard.com
 * Copyright (C) 2014 Datacard. All rights reserved.
 *
 * @addtogroup groupGui
 * @{
 */

/* Includes ------------------------------------------------------------------*/
#include &quot;GuiMgr.h&quot;
#include &quot;project_includes.h&quot;           /* Includes common to entire project. */
#include &quot;GUI.h&quot;
#include &quot;WM.h&quot;                                      /* emWin Windows Manager */
#include &quot;DIALOG.h&quot;

/* Compile-time called macros ------------------------------------------------*/
Q_DEFINE_THIS_FILE;                 /* For QSPY to know the name of this file */
DBG_DEFINE_THIS_MODULE( DBG_MODL_GUI ); /* For debug system to ID this module */

/* Private typedefs ----------------------------------------------------------*/
$declare(AOs::GuiMgr)

/* Private defines -----------------------------------------------------------*/
/* Private macros ------------------------------------------------------------*/
/* Private variables and Local objects ---------------------------------------*/

static GuiMgr l_GuiMgr;           /* the single instance of the active object */

/* Global-scope objects ------------------------------------------------------*/
QActive * const AO_GuiMgr = (QActive *)&amp;l_GuiMgr;      /* &quot;opaque&quot; AO pointer */

/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
$define(AOs::GuiMgr_ctor)
$define(AOs::GuiMgr)

/**
 * @} end addtogroup groupGui
 */
/******** Copyright (C) 2014 Datacard. All rights reserved *****END OF FILE****/</text>
  </file>
  <file name="GuiMgr_gen.h">
   <text>/**
 * @file    GuiMgr.h
 * Declarations for functions for the GuiMgr AO.  This state machine handles
 * all touchscreen, LCD, and GUI events and actions.
 *
 * Note: If editing this file, please make sure to update the GuiMgr.qm
 * model.  The generated code from that model should be very similar to the
 * code in this file.
 *
 * @date    11/06/2014
 * @author  Harry Rostovtsev
 * @email   harry_rostovtsev@datacard.com
 * Copyright (C) 2014 Datacard. All rights reserved.
 *
 * @addtogroup groupGui
 * @{
 */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef GUIMGR_H_
#define GUIMGR_H_

/* Includes ------------------------------------------------------------------*/
#include &quot;qp_port.h&quot;                                        /* for QP support */
#include &quot;Shared.h&quot;

/* Exported defines ----------------------------------------------------------*/
/* Exported macros -----------------------------------------------------------*/
/* Exported types ------------------------------------------------------------*/
$declare(Events)

/* Exported constants --------------------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
$declare(AOs::GuiMgr_ctor)
$declare(AOs::AO_GuiMgr)

/**
 * @} end addtogroup groupGui
 */
#endif                                                           /* GUIMGR_H_ */
/******** Copyright (C) 2014 Datacard. All rights reserved *****END OF FILE****/</text>
  </file>
 </directory>
</model>
