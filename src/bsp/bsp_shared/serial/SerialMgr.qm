<?xml version="1.0" encoding="UTF-8"?>
<model version="3.1.3">
 <framework name="qpc"/>
 <package name="Events" stereotype="0x01"/>
 <package name="AOs" stereotype="0x02">
  <class name="SerialMgr" superclass="qpc::QActive">
   <documentation>/**
 * @brief SerialMgr Active Object (AO) &quot;class&quot; that manages the debug serial port.
 * Upon receiving an event it copies the data to the UART DMA buffer and activates
 * DMA to do the actual outputting to serial, freeing up the system to continue to
 * do real work. The interrupt at the end of the DMA process disables the DMA and
 * lets the AO know that the transfer has completed.  See SerialMgr.qm for diagram
 * and model.
 */</documentation>
   <attribute name="serialTimerEvt" type="QTimeEvt" visibility="0x01" properties="0x00">
    <documentation>/**&lt; QPC timer Used to timeout serial transfers if errors occur. */</documentation>
   </attribute>
   <attribute name="deferredEvtQueue" type="QEQueue" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Native QF queue for deferred request events. */</documentation>
   </attribute>
   <attribute name="deferredEvtQSto[200]" type="QTimeEvt const *" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Storage for deferred event queue. */</documentation>
   </attribute>
   <attribute name="isSerialDbgEnabled" type="bool" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Keep track of whether serial debug is enabled or disabled.  Starts out enabled
 * but an event can enable it. */</documentation>
   </attribute>
   <statechart>
    <initial target="../1/1">
     <action>(void)e;        /* suppress the compiler warning about unused parameter */

QS_OBJ_DICTIONARY(&amp;l_SerialMgr);
QS_FUN_DICTIONARY(&amp;QHsm_top);
QS_FUN_DICTIONARY(&amp;SerialMgr_initial);
QS_FUN_DICTIONARY(&amp;SerialMgr_Active);
QS_FUN_DICTIONARY(&amp;SerialMgr_Idle);
QS_FUN_DICTIONARY(&amp;SerialMgr_Busy);

me-&gt;isSerialDbgEnabled = true; // enable debug over serial by default.

QActive_subscribe((QActive *)me, UART_DMA_START_SIG);
QActive_subscribe((QActive *)me, DBG_LOG_SIG);
QActive_subscribe((QActive *)me, DBG_MENU_SIG);
QActive_subscribe((QActive *)me, UART_DMA_DONE_SIG);
QActive_subscribe((QActive *)me, UART_DMA_TIMEOUT_SIG);
QActive_subscribe((QActive *)me, UART_DMA_DBG_TOGGLE_SIG);</action>
     <initial_glyph conn="1,2,4,3,11,5">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="Active">
     <documentation>/**
 * @brief This state is a catch-all Active state.
 * If any signals need to be handled that do not cause state transitions and 
 * are common to the entire AO, they should be handled here.
 *
 * @param  [in,out] me: Pointer to the state machine
 * @param  [in,out] e:  Pointer to the event being processed.
 * @return status_: QState type that specifies where the state
 * machine is going next.
 */</documentation>
     <entry>/* Post a timer and disarm it right away so it can be
 * rearmed at any point */
QTimeEvt_postIn(
    &amp;me-&gt;serialTimerEvt,
    (QActive *)me,
    SEC_TO_TICKS( LL_MAX_TIMEOUT_SERIAL_DMA_BUSY_SEC )
);
QTimeEvt_disarm(&amp;me-&gt;serialTimerEvt);</entry>
     <tran trig="UART_DMA_DBG_TOGGLE">
      <action>me-&gt;isSerialDbgEnabled = !(me-&gt;isSerialDbgEnabled);</action>
      <tran_glyph conn="3,48,3,-1,21">
       <action box="0,-2,20,2"/>
      </tran_glyph>
     </tran>
     <state name="Idle">
      <documentation>/**
 * @brief This state indicates that the DMA is currently idle and the
 * incoming msg can be sent out to the DMA buffer to be printed out to the
 * serial port.
 *
 * @param  [in,out] me: Pointer to the state machine
 * @param  [in,out] e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
      <entry>/* recall the request from the private requestQueue */
QActive_recall(
    (QActive *)me,
    &amp;me-&gt;deferredEvtQueue
);</entry>
      <tran trig="UART_DMA_START" target="../../2">
       <action>/* Set up the DMA buffer here.  This copies the data from the event to the UART's
 * private buffer as well to avoid someone overwriting it */
Serial_DMAConfig(
    SERIAL_UART1,
    (char *)((LrgDataEvt const *) e)-&gt;dataBuf,
    ((LrgDataEvt const *) e)-&gt;dataLen
);</action>
       <tran_glyph conn="25,14,1,3,31">
        <action box="0,-2,16,2"/>
       </tran_glyph>
      </tran>
      <tran trig="DBG_MENU" target="../../2">
       <action>/* Set up the DMA buffer here.  This copies the data from the event to the UART's
 * private buffer as well to avoid someone overwriting it */
Serial_DMAConfig(
    SERIAL_UART1,
    (char *)((LrgDataEvt const *) e)-&gt;dataBuf,
    ((LrgDataEvt const *) e)-&gt;dataLen
);</action>
       <tran_glyph conn="25,19,1,3,31">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="DBG_LOG">
       <choice target="../../../2">
        <guard brief="SerialDbgEnabled?">true == me-&gt;isSerialDbgEnabled</guard>
        <action>/* Set up the DMA buffer here.  This copies the data from the event to the UART's
 * private buffer as well to avoid someone overwriting it */
Serial_DMAConfig(
    SERIAL_UART1,
    (char *)((LrgDataEvt const *) e)-&gt;dataBuf,
    ((LrgDataEvt const *) e)-&gt;dataLen
);</action>
        <choice_glyph conn="37,27,5,3,19">
         <action box="1,-2,14,2"/>
        </choice_glyph>
       </choice>
       <choice>
        <guard>else</guard>
        <choice_glyph conn="37,27,4,-1,4">
         <action box="0,1,6,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="25,27,1,-1,12">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="6,8,19,37">
       <entry box="1,2,5,2"/>
      </state_glyph>
     </state>
     <state name="Busy">
      <documentation>/**
 * @brief   This state indicates that the DMA is currently busy outputting to
 * the serial port and cannot process incoming data; incoming events will be
 * deferred in this state and handled once the AO goes back to Idle state.
 *
 * @param  [in,out] me: Pointer to the state machine
 * @param  [in,out] e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
      <entry>/* Post a timer on entry */
QTimeEvt_rearm(
    &amp;me-&gt;serialTimerEvt,
    SEC_TO_TICKS( LL_MAX_TIMEOUT_SERIAL_DMA_BUSY_SEC )
);

/* Start the DMA transfer over serial */
Serial_DMAStartXfer( SERIAL_UART1 );</entry>
      <exit>QTimeEvt_disarm( &amp;me-&gt;serialTimerEvt ); /* Disarm timer on exit */</exit>
      <tran trig="UART_DMA_DONE" target="../../1">
       <tran_glyph conn="56,33,3,1,-31">
        <action box="-14,-2,14,2"/>
       </tran_glyph>
      </tran>
      <tran trig="UART_DMA_TIMEOUT" target="../../1">
       <action>err_slow_printf(&quot;UART DMA timeout occurred\n&quot;);</action>
       <tran_glyph conn="56,36,3,1,-31">
        <action box="-16,-2,16,2"/>
       </tran_glyph>
      </tran>
      <tran trig="UART_DMA_START, DBG_LOG, DBG_MENU">
       <action>if (QEQueue_getNFree(&amp;me-&gt;deferredEvtQueue) &gt; 0) {
   /* defer the request - this event will be handled
    * when the state machine goes back to Idle state */
   QActive_defer((QActive *)me, &amp;me-&gt;deferredEvtQueue, e);
} else {
   /* notify the request sender that the request was ignored.. */
   err_slow_printf(&quot;Unable to defer UART_DMA_START request\n&quot;);
}</action>
       <tran_glyph conn="56,44,3,-1,17">
        <action box="0,-6,15,6"/>
       </tran_glyph>
      </tran>
      <state_glyph node="56,8,20,39">
       <entry box="1,2,5,2"/>
       <exit box="1,4,5,2"/>
      </state_glyph>
     </state>
     <state_glyph node="3,3,74,49">
      <entry box="1,2,5,2"/>
     </state_glyph>
    </state>
    <state_diagram size="81,58"/>
   </statechart>
  </class>
  <attribute name="AO_SerialMgr" type="QActive * const" visibility="0x00" properties="0x00">
   <documentation>/**&lt; &quot;opaque&quot; pointer to the Active Object */</documentation>
  </attribute>
  <operation name="SerialMgr_ctor" type="void" visibility="0x00" properties="0x00">
   <documentation>/**
 * @brief C &quot;constructor&quot; for SerialMgr &quot;class&quot;.
 * Initializes all the timers and queues used by the AO, sets up a deferral
 * queue, and sets of the first state.
 * @param  None
 * @param  None
 * @retval None
 */</documentation>
   <code>SerialMgr *me = &amp;l_SerialMgr;
QActive_ctor(&amp;me-&gt;super, (QStateHandler)&amp;SerialMgr_initial);
QTimeEvt_ctor(&amp;me-&gt;serialTimerEvt, UART_DMA_TIMEOUT_SIG);

/* Initialize the deferred event queue and storage for it */
QEQueue_init(
    &amp;me-&gt;deferredEvtQueue,
    (QEvt const **)( me-&gt;deferredEvtQSto ),
    Q_DIM(me-&gt;deferredEvtQSto)
);</code>
  </operation>
 </package>
 <directory name=".">
  <file name="SerialMgr_gen.c">
   <text>/**
 * @file    SerialMgr.c
 * @brief   Declarations for functions for the SerialMgr AO.
 * This state machine handles all output to the serial port.
 *
 * @note 1: If editing this file, please make sure to update the SerialMgr.qm
 * model.  The generated code from that model should be very similar to the
 * code in this file.
 *
 * @date    06/02/2014
 * @author  Harry Rostovtsev
 * @email   rost0031@gmail.com
 * Copyright (C) 2014 Harry Rostovtsev. All rights reserved.
 *
 * @addtogroup groupSerial
 * @{
 */

/* Includes ------------------------------------------------------------------*/
#include &quot;SerialMgr.h&quot;
#include &quot;project_includes.h&quot;         /* Includes common to entire project. */
#include &quot;bsp.h&quot;        /* For seconds to bsp tick conversion (SEC_TO_TICK) */
#include &quot;serial.h&quot;                           /* For low level serial support */

/* Compile-time called macros ------------------------------------------------*/
Q_DEFINE_THIS_FILE;                 /* For QSPY to know the name of this file */
DBG_DEFINE_THIS_MODULE( DBG_MODL_SERIAL ); /* For debug system to ID this module */

/* Private typedefs ----------------------------------------------------------*/
$declare(AOs::SerialMgr)

/* Private defines -----------------------------------------------------------*/
/* Private macros ------------------------------------------------------------*/
/* Private variables and Local objects ---------------------------------------*/
static SerialMgr l_SerialMgr; /* the single instance of the active object */

/* Global-scope objects ----------------------------------------------------*/
QActive * const AO_SerialMgr = (QActive *)&amp;l_SerialMgr;  /* &quot;opaque&quot; AO pointer */

/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
$define(AOs::SerialMgr_ctor)
$define(AOs::SerialMgr)

/**
 * @} end addtogroup groupSerial
 */
/******** Copyright (C) 2014 Harry Rostovtsev. All rights reserved *****END OF FILE****/</text>
  </file>
  <file name="SerialMgr_gen.h">
   <text>/**
 * @file    SerialMgr.h
 * @brief   Declarations for functions for the SerialMgr AO.
 * This state machine handles all output to the serial port
 *
 * @note 1: If editing this file, please make sure to update the SerialMgr.qm
 * model.  The generated code from that model should be very similar to the
 * code in this file.
 *
 * @date    06/02/2014
 * @author  Harry Rostovtsev
 * @email   rost0031@gmail.com
 * Copyright (C) 2014 Harry Rostovtsev. All rights reserved.
 *
 * @addtogroup groupSerial
 * @{
 */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef SERIALMGR_H_
#define SERIALMGR_H_

/* Includes ------------------------------------------------------------------*/
#include &quot;qp_port.h&quot;                                        /* for QP support */
#include &quot;Shared.h&quot;                                   /*  Common Declarations */

/* Exported defines ----------------------------------------------------------*/
/* Exported macros -----------------------------------------------------------*/
/* Exported types ------------------------------------------------------------*/
$declare(Events)

/* Exported constants --------------------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
$declare(AOs::SerialMgr_ctor)
$declare(AOs::AO_SerialMgr)

/**
 * @} end addtogroup groupSerial
 */
#endif                                                        /* SERIALMGR_H_ */
/******** Copyright (C) 2014 Harry Rostovtsev. All rights reserved *****END OF FILE****/</text>
  </file>
 </directory>
</model>
