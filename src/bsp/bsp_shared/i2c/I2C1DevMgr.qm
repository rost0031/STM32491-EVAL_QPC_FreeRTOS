<?xml version="1.0" encoding="UTF-8"?>
<model version="3.1.3">
 <framework name="qpc"/>
 <package name="Events" stereotype="0x01">
  <class name="I2CMemReadReqEvt" superclass="qpc::QEvt">
   <documentation>/**
 * @brief Event struct type for specifying a raw memory read request.
 */</documentation>
   <attribute name="addr" type="uint16_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Internal memory address of the I2C device*/</documentation>
   </attribute>
   <attribute name="bytes" type="uint16_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Specify how many bytes to read */</documentation>
   </attribute>
  </class>
 </package>
 <package name="AOs" stereotype="0x02">
  <class name="I2C1DevMgr" superclass="qpc::QActive">
   <documentation>/**
 * @brief I2C1DevMgr Active Object (AO) &quot;class&quot; that manages the all the I2C
 * devices on the I2C1 Bus.
 * This AO manages the devices connected to the I2C1 bus and all events a
 * ssociated with those devices. It deesn't access to the I2C1 bus directly and
 * instead communicates with the I2CBusMgr AO to request and monitor the direct
 * I2C commands that need to be sent down that are specific for the device that
 * is currently being handled.  See I2CDevMgr.qm for diagram and model.
 */</documentation>
   <attribute name="deferredEvtQueue" type="QEQueue" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Native QF queue for deferred request events. */</documentation>
   </attribute>
   <attribute name="deferredEvtQSto[100]" type="QTimeEvt const *" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Storage for deferred event queue. */</documentation>
   </attribute>
   <attribute name="iDev" type="I2CBus1_Dev_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Specifies which I2CBus1 device is currently being handled by this AO.
 * This should be set when a new I2C_READ_START or I2C_WRITE_START events come
 * in.  Those events should contain the device for which they are meant for. */</documentation>
   </attribute>
   <attribute name="iBus" type="I2C_Bus_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Which I2C bus this AO is responsible for.  This variable is set on
     startup and is used to index into the structure that holds all the
     I2C bus settings. */</documentation>
   </attribute>
   <attribute name="i2cTimerEvt" type="QTimeEvt" visibility="0x01" properties="0x00">
    <documentation>/**&lt; QPC timer Used to timeout overall I2C device interactions. */</documentation>
   </attribute>
   <attribute name="i2cOpTimerEvt" type="QTimeEvt" visibility="0x01" properties="0x00">
    <documentation>/**&lt; QPC timer Used to timeout discrete I2C bus requests to the I2CBusMgr AO. */</documentation>
   </attribute>
   <attribute name="bytesTotal" type="uint16_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Total number of bytes to be read or written with an operation */</documentation>
   </attribute>
   <attribute name="bytesCurr" type="uint16_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Number of bytes already read or written as part of the bytesTotal.
 * This is for R/W operations that don't fit into a single bus request */</documentation>
   </attribute>
   <attribute name="addrStart" type="uint16_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Keep track of the starting internal memory address of a read or a
 write operation */</documentation>
   </attribute>
   <attribute name="addrSize" type="uint8_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Number of bytes the &quot;address&quot; variables are */</documentation>
   </attribute>
   <attribute name="addrCurr" type="uint16_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Keep track of the last memory location accessed.  This is for R/W operations
 * that don't fit into a single bus request */</documentation>
   </attribute>
   <attribute name="errorCode" type="CBErrorCode" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Keep track of last error that occurs. */</documentation>
   </attribute>
   <statechart>
    <initial target="../1/1">
     <action>(void)e;        /* suppress the compiler warning about unused parameter */

me-&gt;iBus = I2CBus1;          /* This AO only handles devices on I2CBus1 */

QS_OBJ_DICTIONARY(&amp;l_I2C1DevMgr);
QS_FUN_DICTIONARY(&amp;QHsm_top);
QS_FUN_DICTIONARY(&amp;I2C1DevMgr_initial);
QS_FUN_DICTIONARY(&amp;I2C1DevMgr_Active);
QS_FUN_DICTIONARY(&amp;I2C1DevMgr_Idle);

QActive_subscribe((QActive *)me, EEPROM_RAW_MEM_READ_SIG);
QActive_subscribe((QActive *)me, EEPROM_SN_READ_SIG);
QActive_subscribe((QActive *)me, EEPROM_EUI64_READ_SIG);</action>
     <initial_glyph conn="1,2,4,3,9,5">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="Active">
     <documentation>/**
 * @brief This state is a catch-all Active state.
 * If any signals need to be handled that do not cause state transitions and 
 * are common to the entire AO, they should be handled here.
 *
 * @param  [in,out] me: Pointer to the state machine
 * @param  [in,out] e:  Pointer to the event being processed.
 * @return status_: QState type that specifies where the state
 * machine is going next.
 */</documentation>
     <entry>/* Post and disarm all the timer events so they can be rearmed at any time */
QTimeEvt_postIn(
    &amp;me-&gt;i2cTimerEvt,
    (QActive *)me,
    SEC_TO_TICKS( HL_MAX_TOUT_SEC_I2C_EV5 )
);
QTimeEvt_disarm(&amp;me-&gt;i2cTimerEvt);

QTimeEvt_postIn(
    &amp;me-&gt;i2cOpTimerEvt,
    (QActive *)me,
    SEC_TO_TICKS( HL_MAX_TOUT_SEC_I2C_EV5 )
);
QTimeEvt_disarm(&amp;me-&gt;i2cOpTimerEvt);</entry>
     <state name="Busy">
      <documentation>/**
 * @brief   This state indicates that the I2C is currently busy and cannot
 * process incoming data; incoming events will be deferred in this state and
 * handled once the AO goes back to Idle state.
 *
 * @param  [in,out] me: Pointer to the state machine
 * @param  [in,out] e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
      <entry>/* Post a timer on entry */
QTimeEvt_rearm(
    &amp;me-&gt;i2cTimerEvt,
    SEC_TO_TICKS( HL_MAX_TOUT_SEC_I2C_DEV_REQ )
);</entry>
      <exit>QTimeEvt_disarm( &amp;me-&gt;i2cTimerEvt ); /* Disarm timer on exit */</exit>
      <tran trig="I2C1_DEV_TIMEOUT" target="../../1">
       <action>ERR_printf(&quot;I2C1Dev timeout occurred with error: 0x%08x\n&quot;, me-&gt;errorCode);</action>
       <tran_glyph conn="47,81,3,1,-22">
        <action box="-17,-2,16,2"/>
       </tran_glyph>
      </tran>
      <tran trig="EEPROM_RAW_MEM_READ, EEPROM_SN_READ, EEPROM_EUI64_READ">
       <action>if (QEQueue_getNFree(&amp;me-&gt;deferredEvtQueue) &gt; 0) {
   /* defer the request - this event will be handled
    * when the state machine goes back to Idle state */
   QActive_defer((QActive *)me, &amp;me-&gt;deferredEvtQueue, e);
   DBG_printf(&quot;Deferring I2C request until current is done\n&quot;);
} else {
   /* notify the request sender that the request was ignored.. */
   ERR_printf(&quot;Unable to defer I2C request\n&quot;);
}</action>
       <tran_glyph conn="47,87,3,-1,23">
        <action box="1,-7,19,6"/>
       </tran_glyph>
      </tran>
      <state name="GenerateStart">
       <entry>/* Set error code */
me-&gt;errorCode = ERR_I2C1DEV_EV5_TIMEOUT;

/* Set timer */
QTimeEvt_rearm(
    &amp;me-&gt;i2cOpTimerEvt,
    SEC_TO_TICKS( HL_MAX_TOUT_SEC_I2C_EV5 )
);

/* Directly post an event to the appropriate I2CBusMgr AO */
static QEvt const qEvt = { I2C_BUS_START_BIT_SIG, 0U, 0U };
QACTIVE_POST(AO_I2CBusMgr[me-&gt;iBus], &amp;qEvt, me);

DBG_printf(&quot;ActivePosted I2C_BUS_START_BIT\n&quot;);</entry>
       <exit>QTimeEvt_disarm(&amp;me-&gt;i2cOpTimerEvt);</exit>
       <tran trig="I2C_BUS_DONE">
        <choice target="../../../../1">
         <guard>else</guard>
         <action>ERR_printf(
    &quot;Got I2C_BUS_DONE with error: 0x%08x\n&quot;,
    ((I2CStatusEvt const *)e)-&gt;errorCode
);</action>
         <choice_glyph conn="96,26,4,1,5,-71">
          <action box="0,2,10,2"/>
         </choice_glyph>
        </choice>
        <choice target="../../../3">
         <guard brief="NoErr?">ERR_NONE == ((I2CStatusEvt const *)e)-&gt;errorCode</guard>
         <action>DBG_printf(&quot;Got I2C_BUS_DONE with no error\n&quot;);</action>
         <choice_glyph conn="96,26,5,3,9,1,3">
          <action box="1,-2,10,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="82,26,3,-1,14">
         <action box="0,-2,14,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="82,16,18,13">
        <entry box="1,2,6,2"/>
        <exit box="1,4,6,2"/>
       </state_glyph>
      </state>
      <state name="Send7BitAddrTxMode">
       <entry>/* Set error code */
me-&gt;errorCode = ERR_I2C1DEV_EV6_TIMEOUT;

/* Set timer */
QTimeEvt_rearm(
    &amp;me-&gt;i2cOpTimerEvt,
    SEC_TO_TICKS( HL_MAX_TOUT_SEC_I2C_EV6 )
);

/* Allocate and directly post an event to the appropriate I2CBusMgr AO */
I2CAddrEvt *i2cAddrEvt   = Q_NEW( I2CAddrEvt, I2C_BUS_SEND_7BIT_ADDR_SIG );
i2cAddrEvt-&gt;i2cBus       = me-&gt;iBus;
i2cAddrEvt-&gt;addr         = I2C_getI2C1DevAddr(me-&gt;iDev);
i2cAddrEvt-&gt;addrSize     = I2C_getI2C1DevAddrSize(me-&gt;iDev);
i2cAddrEvt-&gt;i2cDirection = I2C_Direction_Transmitter;
QACTIVE_POST(AO_I2CBusMgr[me-&gt;iBus], (QEvt *)i2cAddrEvt, me);</entry>
       <exit>QTimeEvt_disarm(&amp;me-&gt;i2cOpTimerEvt);</exit>
       <tran trig="I2C_BUS_DONE">
        <choice target="../../../../1">
         <guard>else</guard>
         <action>ERR_printf(
    &quot;Got I2C_BUS_DONE with error: 0x%08x\n&quot;,
    ((I2CStatusEvt const *)e)-&gt;errorCode
);</action>
         <choice_glyph conn="122,26,4,1,6,-97">
          <action box="0,2,10,2"/>
         </choice_glyph>
        </choice>
        <choice target="../../../4">
         <guard brief="NoErr?">ERR_NONE == ((I2CStatusEvt const *)e)-&gt;errorCode</guard>
         <action>DBG_printf(&quot;Got I2C_BUS_DONE with no error\n&quot;);</action>
         <choice_glyph conn="122,26,5,3,9,1,3">
          <action box="1,-2,10,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="108,26,3,-1,14">
         <action box="0,-2,14,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="108,16,18,13">
        <entry box="1,2,6,2"/>
        <exit box="1,4,6,2"/>
       </state_glyph>
      </state>
      <state name="SendInternalAddr">
       <entry>/* Set error code */
me-&gt;errorCode = ERR_I2C1DEV_EV8_TIMEOUT;

/* Set timer */
QTimeEvt_rearm(
    &amp;me-&gt;i2cOpTimerEvt,
    SEC_TO_TICKS( HL_MAX_TOUT_SEC_I2C_EV8 )
);

/* Allocate and directly post an event to the appropriate I2CBusMgr AO */
I2CAddrEvt *i2cAddrEvt   = Q_NEW( I2CAddrEvt, I2C_BUS_SEND_DEV_ADDR_SIG );
i2cAddrEvt-&gt;i2cBus       = me-&gt;iBus;
i2cAddrEvt-&gt;addr         = me-&gt;addrStart;
i2cAddrEvt-&gt;addrSize     = I2C_getI2C1MemAddrSize(me-&gt;iDev);
i2cAddrEvt-&gt;i2cDirection = I2C_Direction_Transmitter;
QACTIVE_POST(AO_I2CBusMgr[me-&gt;iBus], (QEvt *)i2cAddrEvt, me);</entry>
       <exit>QTimeEvt_disarm(&amp;me-&gt;i2cOpTimerEvt);</exit>
       <tran trig="I2C_BUS_DONE">
        <choice target="../../../../1">
         <guard>else</guard>
         <action>ERR_printf(
    &quot;Got I2C_BUS_DONE with error: 0x%08x\n&quot;,
    ((I2CStatusEvt const *)e)-&gt;errorCode
);</action>
         <choice_glyph conn="148,26,4,1,7,-123">
          <action box="0,2,10,2"/>
         </choice_glyph>
        </choice>
        <choice target="../../../6">
         <guard brief="NoErr?">ERR_NONE == ((I2CStatusEvt const *)e)-&gt;errorCode</guard>
         <action>DBG_printf(&quot;Got I2C_BUS_DONE with no error\n&quot;);</action>
         <choice_glyph conn="148,26,5,3,9,12,-105,9,4">
          <action box="1,-2,10,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="134,26,3,-1,14">
         <action box="0,-2,14,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="134,16,18,13">
        <entry box="1,2,6,2"/>
        <exit box="1,4,6,2"/>
       </state_glyph>
      </state>
      <state name="CheckingBus">
       <entry>/* Set error code */
me-&gt;errorCode = ERR_I2C1DEV_CHECK_BUS_TIMEOUT;

/* Set timer */
QTimeEvt_rearm(
    &amp;me-&gt;i2cOpTimerEvt,
    SEC_TO_TICKS( HL_MAX_TOUT_SEC_I2C_BUS_CHECK )
);

/* Allocate a dynamic event to send back the result after attempting to recover
 * the I2C bus. */
I2CAddrEvt *i2cAddrEvt = Q_NEW( I2CAddrEvt, I2C_BUS_CHECK_FREE_SIG );
i2cAddrEvt-&gt;i2cBus     = me-&gt;iBus;
i2cAddrEvt-&gt;addr       = I2C_getI2C1DevAddr(me-&gt;iDev);
i2cAddrEvt-&gt;addrSize   = I2C_getI2C1DevAddrSize(me-&gt;iDev);
QACTIVE_POST(AO_I2CBusMgr[me-&gt;iBus], (QEvt *)(i2cAddrEvt), me);

DBG_printf(&quot;ActivePosted I2C_BUS_CHECK_FREE\n&quot;);</entry>
       <exit>QTimeEvt_disarm(&amp;me-&gt;i2cOpTimerEvt);</exit>
       <tran trig="I2C_BUS_DONE">
        <choice target="../../../../1">
         <guard>else</guard>
         <action>ERR_printf(
    &quot;Got I2C_BUS_DONE with error: 0x%08x\n&quot;,
    ((I2CStatusEvt const *)e)-&gt;errorCode
);</action>
         <choice_glyph conn="71,26,4,1,4,-46">
          <action box="0,2,10,2"/>
         </choice_glyph>
        </choice>
        <choice target="../../../2">
         <guard brief="NoErr?">ERR_NONE == ((I2CStatusEvt const *)e)-&gt;errorCode</guard>
         <action>DBG_printf(&quot;Got I2C_BUS_DONE with no error\n&quot;);</action>
         <choice_glyph conn="71,26,5,3,9,1,2">
          <action box="1,-2,10,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="57,26,3,-1,14">
         <action box="0,-2,14,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="57,16,17,13">
        <entry box="1,2,6,2"/>
        <exit box="1,4,6,2"/>
       </state_glyph>
      </state>
      <state name="GenerateStart1">
       <entry>/* Set error code */
me-&gt;errorCode = ERR_I2C1DEV_EV5_TIMEOUT;

/* Set timer */
QTimeEvt_rearm(
    &amp;me-&gt;i2cOpTimerEvt,
    SEC_TO_TICKS( HL_MAX_TOUT_SEC_I2C_EV5 )
);

/* Directly post an event to the appropriate I2CBusMgr AO */
static QEvt const qEvt = { I2C_BUS_START_BIT_SIG, 0U, 0U };
QACTIVE_POST(AO_I2CBusMgr[me-&gt;iBus], &amp;qEvt, me);</entry>
       <exit>QTimeEvt_disarm(&amp;me-&gt;i2cOpTimerEvt);</exit>
       <tran trig="I2C_BUS_DONE">
        <choice target="../../../../1">
         <guard>else</guard>
         <action>ERR_printf(
    &quot;Got I2C_BUS_DONE with error: 0x%08x\n&quot;,
    ((I2CStatusEvt const *)e)-&gt;errorCode
);</action>
         <choice_glyph conn="70,53,4,1,4,-45">
          <action box="0,2,10,2"/>
         </choice_glyph>
        </choice>
        <choice target="../../../7">
         <guard brief="NoErr?">ERR_NONE == ((I2CStatusEvt const *)e)-&gt;errorCode</guard>
         <action>DBG_printf(&quot;Got I2C_BUS_DONE with no error\n&quot;);</action>
         <choice_glyph conn="70,53,5,3,10,1,2">
          <action box="1,-2,10,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="56,53,3,-1,14">
         <action box="0,-2,14,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="56,43,18,13">
        <entry box="1,2,6,2"/>
        <exit box="1,4,6,2"/>
       </state_glyph>
      </state>
      <state name="Send7BitAddrRxMode">
       <entry>/* Set error code */
me-&gt;errorCode = ERR_I2C1DEV_EV6_TIMEOUT;

/* Set timer */
QTimeEvt_rearm(
    &amp;me-&gt;i2cOpTimerEvt,
    SEC_TO_TICKS( HL_MAX_TOUT_SEC_I2C_EV6 )
);

/* Allocate and directly post an event to the appropriate I2CBusMgr AO */
I2CAddrEvt *i2cAddrEvt   = Q_NEW( I2CAddrEvt, I2C_BUS_SEND_7BIT_ADDR_SIG );
i2cAddrEvt-&gt;i2cBus       = me-&gt;iBus;
i2cAddrEvt-&gt;addr         = I2C_getI2C1DevAddr(me-&gt;iDev);
i2cAddrEvt-&gt;addrSize     = I2C_getI2C1DevAddrSize(me-&gt;iDev);
i2cAddrEvt-&gt;i2cDirection = I2C_Direction_Receiver;
QACTIVE_POST(AO_I2CBusMgr[me-&gt;iBus], (QEvt *)i2cAddrEvt, me);</entry>
       <exit>QTimeEvt_disarm(&amp;me-&gt;i2cOpTimerEvt);</exit>
       <tran trig="I2C_BUS_DONE">
        <choice target="../../../../1">
         <guard>else</guard>
         <action>ERR_printf(
    &quot;Got I2C_BUS_DONE with error: 0x%08x\n&quot;,
    ((I2CStatusEvt const *)e)-&gt;errorCode
);</action>
         <choice_glyph conn="96,53,4,1,5,-71">
          <action box="0,2,10,2"/>
         </choice_glyph>
        </choice>
        <choice target="../../../8">
         <guard brief="NoErr?">ERR_NONE == ((I2CStatusEvt const *)e)-&gt;errorCode</guard>
         <action>DBG_printf(&quot;Got I2C_BUS_DONE with no error\n&quot;);</action>
         <choice_glyph conn="96,53,5,3,10,1,2">
          <action box="1,-2,10,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="82,53,3,-1,14">
         <action box="0,-2,14,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="82,43,18,13">
        <entry box="1,2,6,2"/>
        <exit box="1,4,6,2"/>
       </state_glyph>
      </state>
      <state name="ReadMem">
       <entry>/* Set error code */
me-&gt;errorCode = ERR_I2C1DEV_EV6_TIMEOUT;

/* Set timer */
QTimeEvt_rearm(
    &amp;me-&gt;i2cOpTimerEvt,
    SEC_TO_TICKS( HL_MAX_TOUT_SEC_I2C_EV6 )
);

/* Allocate and directly post an event to the appropriate I2CBusMgr AO */
I2CReadMemReqEvt *i2cReadMemEvt = Q_NEW( I2CReadMemReqEvt, I2C_BUS_READ_MEM_SIG );
i2cReadMemEvt-&gt;i2cBus           = me-&gt;iBus;
i2cReadMemEvt-&gt;addr             = me-&gt;addrStart;
i2cReadMemEvt-&gt;addrSize         = I2C_getI2C1MemAddrSize(me-&gt;iDev);
i2cReadMemEvt-&gt;memAccessType    = I2C_MEM_DMA;
i2cReadMemEvt-&gt;bytes            = me-&gt;bytesTotal; //TODO: remember to fix this.  This should not exceed max page size.
QACTIVE_POST(AO_I2CBusMgr[me-&gt;iBus], (QEvt *)i2cReadMemEvt, me);</entry>
       <exit>QTimeEvt_disarm(&amp;me-&gt;i2cOpTimerEvt);</exit>
       <tran trig="I2C_BUS_DONE">
        <choice target="../../../../1">
         <guard>else</guard>
         <action>ERR_printf(
    &quot;Got I2C_BUS_DONE with error: 0x%08x\n&quot;,
    ((I2CStatusEvt const *)e)-&gt;errorCode
);</action>
         <choice_glyph conn="122,53,4,1,6,-97">
          <action box="0,2,10,2"/>
         </choice_glyph>
        </choice>
        <choice target="../../../../1">
         <guard brief="NoErr?">ERR_NONE == ((I2CBusDataEvt const *)e)-&gt;errorCode</guard>
         <action>LOG_printf(&quot;Got I2C_BUS_DONE with no error\n&quot;);
char tmp[80];
memset(tmp, 0, sizeof(tmp));
uint16_t tmpLen = 0;
CBErrorCode err = CON_hexToStr(
    (const uint8_t *)((I2CBusDataEvt const *)e)-&gt;dataBuf, // data to convert
    ((I2CBusDataEvt const *)e)-&gt;dataLen, // length of data to convert
    tmp,                                 // where to write output
    sizeof(tmp),                         // max size of output buffer
    &amp;tmpLen,                             // size of the resulting output
    0,                                   // no columns
    ' '                                  // separator
);
LOG_printf(&quot;Read %s\n&quot;, tmp);</action>
         <choice_glyph conn="122,53,5,1,9,12,-106">
          <action box="1,-2,10,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="108,53,3,-1,14">
         <action box="0,-2,14,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="108,43,18,13">
        <entry box="1,2,6,2"/>
        <exit box="1,4,6,2"/>
       </state_glyph>
      </state>
      <state_glyph node="47,7,116,81">
       <entry box="1,2,5,2"/>
       <exit box="1,4,5,2"/>
      </state_glyph>
     </state>
     <state name="Idle">
      <documentation>/**
 * @brief This state indicates that the I2C bus is currently idle and the
 * incoming msg can be handled.
 * This state is the default rest state of the state machine and can handle
 * various I2C requests.  Upon entry, it also checks the deferred queue to see
 * if any request events are waiting which were posted while I2C bus was busy.
 * if there are any waiting, it will read them out, which automatically posts
 * them and the state machine will go and handle them.
 *
 * @param  [in,out] me: Pointer to the state machine
 * @param  [in,out] e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
      <entry>/* recall the request from the private requestQueue */
QActive_recall(
    (QActive *)me,
    &amp;me-&gt;deferredEvtQueue
);

DBG_printf(&quot;back in Idle\n&quot;);</entry>
      <exit>me-&gt;bytesCurr = 0; // Reset the current byte counter</exit>
      <tran trig="EEPROM_RAW_MEM_READ" target="../../0/5">
       <action>me-&gt;iDev = EEPROM; // Set which device is being accessed
me-&gt;addrStart = ((I2CMemReadReqEvt const *)e)-&gt;addr;
me-&gt;addrSize  = I2C_getI2C1MemAddrSize(me-&gt;iDev);
me-&gt;bytesTotal = ((I2CMemReadReqEvt const *)e)-&gt;bytes;</action>
       <tran_glyph conn="6,18,3,3,51">
        <action box="0,-2,23,2"/>
       </tran_glyph>
      </tran>
      <tran trig="EEPROM_SN_READ" target="../../0/5">
       <action>me-&gt;iDev = SN_ROM; // Set which device is being accessed
me-&gt;addrStart = I2C_getI2C1MinMemAddr(me-&gt;iDev);
me-&gt;addrSize  = I2C_getI2C1MemAddrSize(me-&gt;iDev);
me-&gt;bytesTotal = I2C_getI2C1PageSize(me-&gt;iDev);</action>
       <tran_glyph conn="6,21,3,3,51">
        <action box="0,-2,17,2"/>
       </tran_glyph>
      </tran>
      <tran trig="EEPROM_EUI64_READ" target="../../0/5">
       <action>me-&gt;iDev = EUI_ROM; // Set which device is being accessed
me-&gt;addrStart = I2C_getI2C1MinMemAddr(me-&gt;iDev);
me-&gt;addrSize  = I2C_getI2C1MemAddrSize(me-&gt;iDev);
me-&gt;bytesTotal = I2C_getI2C1PageSize(me-&gt;iDev);</action>
       <tran_glyph conn="6,24,3,3,51">
        <action box="0,-2,17,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="6,7,19,80">
       <entry box="1,2,5,2"/>
       <exit box="1,4,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="2,3,163,86">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="167,90"/>
   </statechart>
  </class>
  <attribute name="AO_I2C1DevMgr" type="QActive * const" visibility="0x00" properties="0x00">
   <documentation>/**&lt; &quot;opaque&quot; pointer to the Active Object */</documentation>
  </attribute>
  <operation name="I2C1DevMgr_ctor" type="void" visibility="0x00" properties="0x00">
   <documentation>/**
 * @brief C &quot;constructor&quot; for I2C1DevMgr &quot;class&quot;.
 * Initializes all the timers and queues used by the AO, sets up a deferral
 * queue, and sets of the first state.
 * @param [in]: none.
 * @retval: none
 */</documentation>
   <code>I2C1DevMgr *me = &amp;l_I2C1DevMgr;

QActive_ctor( &amp;me-&gt;super, (QStateHandler)&amp;I2C1DevMgr_initial );
QTimeEvt_ctor( &amp;me-&gt;i2cTimerEvt, I2C1_DEV_TIMEOUT_SIG );
QTimeEvt_ctor( &amp;me-&gt;i2cOpTimerEvt, I2C1_DEV_OP_TIMEOUT_SIG );

/* Initialize the deferred event queue and storage for it */
QEQueue_init(
    &amp;me-&gt;deferredEvtQueue,
    (QEvt const **)( me-&gt;deferredEvtQSto ),
    Q_DIM(me-&gt;deferredEvtQSto)
);

dbg_slow_printf(&quot;Constructor\n&quot;);</code>
  </operation>
 </package>
 <directory name=".">
  <file name="I2C1DevMgr_gen.c">
   <text>/**
 * @file    I2C1DevMgr.c
 * @brief   Declarations for functions for the I2C1DevMgr AO.
 * This state machine handles any device that is attached to the I2C1 bus.
 * This AO doesn't handle the low level I2C commands and instead communicates
 * with I2CBusMgr AO to send the events that kick off the low level I2C cmds.
 * The rationale behind this is that different I2C devices require different
 * I2C commands in different order.  Some EEPROMs request 2 Start bits, some
 * other devices have different timeouts for their write/read commands. This
 * way, the I2C bus logic can stay common and any device differences are
 * handled in the device specific AOs.
 *
 * @note 1: If editing this file, please make sure to update the I2C1DevMgr.qm
 * model.  The generated code from that model should be very similar to the
 * code in this file.
 *
 * @date    10/24/2014
 * @author  Harry Rostovtsev
 * @email   harry_rostovtsev@datacard.com
 * Copyright (C) 2014 Datacard. All rights reserved.
 *
 * @addtogroup groupI2C
 * @{
 */

/* Includes ------------------------------------------------------------------*/
#include &quot;I2C1DevMgr.h&quot;
#include &quot;project_includes.h&quot;           /* Includes common to entire project. */
#include &quot;bsp_defs.h&quot;     /* For seconds to bsp tick conversion (SEC_TO_TICK) */
#include &quot;i2c.h&quot;                                  /* For I2C bus declarations */
#include &quot;i2c_dev.h&quot;                           /* For I2C device declarations */
#include &quot;I2CBusMgr.h&quot;

/* Compile-time called macros ------------------------------------------------*/
Q_DEFINE_THIS_FILE                  /* For QSPY to know the name of this file */
DBG_DEFINE_THIS_MODULE( DBG_MODL_I2C ); /* For debug system to ID this module */

/* Private typedefs ----------------------------------------------------------*/
$declare(AOs::I2C1DevMgr)

/* Private defines -----------------------------------------------------------*/
/* Private macros ------------------------------------------------------------*/
/* Private variables and Local objects ---------------------------------------*/
static I2C1DevMgr l_I2C1DevMgr;   /* the single instance of the active object */

/* Global-scope objects ----------))------------------------------------------*/
QActive * const AO_I2C1DevMgr = (QActive *)&amp;l_I2C1DevMgr;/**&lt; &quot;opaque&quot; AO pointer */

extern I2CBus1_DevSettings_t s_I2CBus1_Dev[MAX_I2C1_DEV]; /**&lt; I2C devices this AO uses */

/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
$define(AOs::I2C1DevMgr_ctor)
$define(AOs::I2C1DevMgr)

/**
 * @} end addtogroup groupI2C
 */
/******** Copyright (C) 2014 Datacard. All rights reserved *****END OF FILE****/</text>
  </file>
  <file name="I2C1DevMgr_gen.h">
   <text>/**
 * @file    I2C1DevMgr.h
 * @brief   Declarations for functions for the I2C1DevMgr AO.
 * This state machine handles any device that is attached to the I2C1 bus.
 * This AO doesn't handle the low level I2C commands and instead communicates
 * with I2CBusMgr AO to send the events that kick off the low level I2C cmds.
 * The rationale behind this is that different I2C devices require different
 * I2C commands in different order.  Some EEPROMs request 2 Start bits, some
 * other devices have different timeouts for their write/read commands. This
 * way, the I2C bus logic can stay common and any device differences are
 * handled in the device specific AOs.
 *
 * @note 1: If editing this file, please make sure to update the I2C1DevMgr.qm
 * model.  The generated code from that model should be very similar to the
 * code in this file.
 *
 * @date    10/24/2014
 * @author  Harry Rostovtsev
 * @email   harry_rostovtsev@datacard.com
 * Copyright (C) 2014 Datacard. All rights reserved.
 *
 * @addtogroup groupI2C
 * @{
 */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef I2C1DEVMGR_H_
#define I2C1DEVMGR_H_

/* Includes ------------------------------------------------------------------*/
#include &quot;qp_port.h&quot;                                        /* for QP support */
#include &quot;Shared.h&quot;                                   /*  Common Declarations */

/* Exported defines ----------------------------------------------------------*/
#define MAX_BUS_RETRIES   100 /**&lt; Max number of retries for I2C bus for busy flag */
#define MAX_I2C_TIMEOUT 10000 /**&lt; Max number of retries for I2C bus for busy flag */
/* Exported macros -----------------------------------------------------------*/
/* Exported types ------------------------------------------------------------*/
$declare(Events)

/* Exported constants --------------------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
$declare(AOs::I2C1DevMgr_ctor)
$declare(AOs::AO_I2C1DevMgr)

/**
 * @} end addtogroup groupI2C
 */
#endif                                                       /* I2C1DEVMGR_H_ */
/******** Copyright (C) 2014 Datacard. All rights reserved *****END OF FILE****/</text>
  </file>
 </directory>
</model>
